df_RT_abs_ctpd_TD <- df_RT_abs_ctpd %>%filter(group == 'TD')
lm_RT_TD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_TD)
segmented(obj=lm_RT_TD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
davies.test(lm_RT_TD,seg.Z=~abs_ctpd)
#LMER models
df_RT_abs_ctpd<- df_filter %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0)
# lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctpd)
# summary(lmer_RT)
#Include cd-pd (current distribution mean and previous distribution mean difference) and ct_pt current target and previous target ori as predictors
# lmer_RT_cdpt_ctpd<-lmer(rt ~ abs_ctpd_z + abs_cdpd_z + abs_ctpt_z +  group + (abs_ctpd_z|subjectId)+ (abs_ctpt_z|subjectId) + (abs_cdpd_z|subjectId) , REML=F, data = df_RT_abs_ctpd)
# summary(lmer_RT_cdpt_ctpd)
# bf_rt <- generalTestBF(log_rt ~ abs_ctpt_z * abs_ctpd_z * abs_cdpd_z* group + subjectId, data = as.data.frame(df_RT_abs_ctpd),
#                     whichRandom = "subjectId", neverExclude = "subjectId",whichModels = "withmain")
# bf_df_rt <- as.data.frame(bf_rt)
# bf_sorted_rt <- sort(bf_rt/ max(bf_rt))
# bf_sorted_df_rt <- as.data.frame(bf_sorted_rt)
# bf_sorted_df_rt$bfs <- (1/bf_sorted_df_rt$bf)
# print(bf_sorted_df_rt)
#Segmented regression (like in Andrey's papers) for ASD group
df_RT_abs_ctpd_ASD <- df_RT_abs_ctpd %>%filter(group == 'ASD')
lm_RT_ASD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_ASD)
summary(lm_RT_ASD)
segmented(obj=lm_RT_ASD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
davies.test(lm_RT_ASD,seg.Z=~abs_ctpd)
#Segmented regression (like in Andrey's papers) for TD group
df_RT_abs_ctpd_TD <- df_RT_abs_ctpd %>%filter(group == 'TD')
lm_RT_TD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_TD)
segmented(obj=lm_RT_TD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
davies.test(lm_RT_TD,seg.Z=~abs_ctpd)
#summary(lm_RT_ASD)
segmented(obj=lm_RT_ASD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
segTD = segmented(obj=lm_RT_TD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
#LMER models
df_RT_abs_ctpd<- df_filter %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0)
# lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctpd)
# summary(lmer_RT)
#Include cd-pd (current distribution mean and previous distribution mean difference) and ct_pt current target and previous target ori as predictors
# lmer_RT_cdpt_ctpd<-lmer(rt ~ abs_ctpd_z + abs_cdpd_z + abs_ctpt_z +  group + (abs_ctpd_z|subjectId)+ (abs_ctpt_z|subjectId) + (abs_cdpd_z|subjectId) , REML=F, data = df_RT_abs_ctpd)
# summary(lmer_RT_cdpt_ctpd)
# bf_rt <- generalTestBF(log_rt ~ abs_ctpt_z * abs_ctpd_z * abs_cdpd_z* group + subjectId, data = as.data.frame(df_RT_abs_ctpd),
#                     whichRandom = "subjectId", neverExclude = "subjectId",whichModels = "withmain")
# bf_df_rt <- as.data.frame(bf_rt)
# bf_sorted_rt <- sort(bf_rt/ max(bf_rt))
# bf_sorted_df_rt <- as.data.frame(bf_sorted_rt)
# bf_sorted_df_rt$bfs <- (1/bf_sorted_df_rt$bf)
# print(bf_sorted_df_rt)
#Segmented regression (like in Andrey's papers) for ASD group
df_RT_abs_ctpd_ASD <- df_RT_abs_ctpd %>%filter(group == 'ASD')
lm_RT_ASD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_ASD)
#summary(lm_RT_ASD)
segASD = segmented(obj=lm_RT_ASD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segASD)
davies.test(lm_RT_ASD,seg.Z=~abs_ctpd)
#Segmented regression (like in Andrey's papers) for TD group
df_RT_abs_ctpd_TD <- df_RT_abs_ctpd %>%filter(group == 'TD')
lm_RT_TD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_TD)
segTD = segmented(obj=lm_RT_TD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segTD)
davies.test(lm_RT_TD,seg.Z=~abs_ctpd)
#Estimate slope of linear regression
est_bp<- function(x) {
print(unique(x$subjectId))
my.lm <- lm(rt ~ abs_ctpd, data=x )
b1<-my.lm$coefficients[2]
return(data.frame(s = unique(x$subjectId),slope = b1))
}
#Estimate slope within range of previous distractor distribution for each participant
df_RT_abs_ctpd  %>%
filter(abs_ctpd < 31)%>%
group_by(subjectId,group) %>% do(est_bp(.)) -> df_est_sl
df_est_sl$range <- "in"
#Violin plot of slopes in range per group
ggplot(df_est_sl, aes(group,slope)) + geom_violin() + stat_summary(fun.y=base::mean, geom="point", size =3)+ stat_summary(fun.data = "mean_se", geom="errorbar", width = 0.2) + scale_color_manual(values=c("darkorange", "darkslategrey"))
t.test(df_est_sl$slope~df_est_sl$group)
#Estimate slope outside range of previous distractor distribution for each participant
df_RT_abs_ctpd  %>%
filter(abs_ctpd > 30)%>%
group_by(subjectId,group) %>% do(est_bp(.)) -> df_est_sl_out
df_est_sl_out$range <- "out"
#Violin plot of slopes outside range per group
ggplot(df_est_sl_out, aes(group,slope)) + geom_violin() + stat_summary(fun.y=base::mean, geom="point", size =3)+ stat_summary(fun.data = "mean_se", geom="errorbar", width = 0.2) + scale_color_manual(values=c("darkorange", "darkslategrey"))
t.test(df_est_sl$slope~df_est_sl$group)
#Plot slopes in compared to outside range per group
df_est_sl<-rbind(df_est_sl,df_est_sl_out)
df_est_sl$range <- as.factor(df_est_sl$range)
ggplot(df_est_sl, aes(range,slope, color=group)) + geom_point(aes(group = group)) + stat_summary(fun.y=base::mean, geom="point", size =3)+ stat_summary(fun.data = "mean_se", geom="errorbar", width = 0.2) + scale_color_manual(values=c("darkorange", "darkslategrey"))
lmer_slope<-lmer(slope ~ range+group + (range|subjectId) ,  REML=F, data = df_est_sl)
df_steps<-df_filter %>%
mutate(abs_ctpd = abs(ctpd)) %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0) %>% #Only first trial of test streak
group_by(subjectId,group,abs_ctpd) %>%
summarise(rt=mean(rt), log_rt=mean(log_rt), rt_z = mean(rt_z), totBlockN=totBlockN)
df_steps$in_range[df_steps$abs_ctpd< 31] <- "in_range"
df_steps$in_range[df_steps$abs_ctpd> 30] <- "out_range"
df_steps$in_range = as.factor(df_steps$in_range)
inrange_plot<-df_steps%>%
group_by(subjectId,in_range,group)%>%
summarise(n=n(),rt=mean(rt)) %>%
ggplot(aes(in_range,rt, color=group)) + geom_point(size=0.5, colour = "gray80")  + geom_line(aes(group=subjectId), colour = "gray80") + stat_summary(fun.y=base::mean, geom="point", size =3) + stat_summary(fun.y=base::mean, geom="line",aes(group=group)) + stat_summary(fun.data = "mean_se", geom="errorbar", width = 0.2) +  facet_grid(~group)+ theme_classic() + scale_color_manual(values=c("darkorange", "darkslategrey"))+ xlab("In or out range") + ylab("Mean Reaction Time (ms)") + scale_x_discrete(labels=c("in_range" = "in range", "out_range" = "out range"))
plot_grid(ctpd_plot, abs_ctpd_plot,df_steps_plot,inrange_plot,labels = "AUTO")
df_steps<-df_filter %>%
mutate(abs_ctpd = abs(ctpd)) %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0) %>% #Only first trial of test streak
group_by(subjectId,group,abs_ctpd) %>%
summarise(rt=mean(rt), log_rt=mean(log_rt), rt_z = mean(rt_z), totBlockN=totBlockN)
df_steps$in_range[df_steps$abs_ctpd< 31] <- "in_range"
df_steps$in_range[df_steps$abs_ctpd> 30] <- "out_range"
df_steps$in_range = as.factor(df_steps$in_range)
inrange_plot<-df_steps%>%
group_by(subjectId,in_range,group)%>%
summarise(n=n(),rt=mean(rt)) %>%
ggplot(aes(in_range,rt, color=group)) + geom_point(size=0.5, colour = "gray80")  + geom_line(aes(group=subjectId), colour = "gray80") + stat_summary(fun.y=base::mean, geom="point", size =3) + stat_summary(fun.y=base::mean, geom="line",aes(group=group)) + stat_summary(fun.data = "mean_se", geom="errorbar", width = 0.2) +  facet_grid(~group)+ theme_classic() + scale_color_manual(values=c("darkorange", "darkslategrey"))+ xlab("In or out range") + ylab("Mean Reaction Time (ms)") + scale_x_discrete(labels=c("in_range" = "in range", "out_range" = "out range"))
#plot_grid(ctpd_plot, abs_ctpd_plot,df_steps_plot,inrange_plot,labels = "AUTO")
lmer_rt_in_out <- lmer(log_rt ~ in_range * group + (in_range|subjectId) , REML=F,  data = df_steps)
summary(lmer_rt_in_out)
lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctpd[df_RT_abs_ctpd$in_range == "in_range", ])
#LMER models
df_RT_abs_ctpd<- df_filter %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0)
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd< 31] <- 1
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd> 30] <- 0
lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctpd[df_RT_abs_ctpd$in_range == 1, ])
#LMER models
df_RT_abs_ctpd<- df_filter %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0)
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd< 31] <- 1
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd> 30] <- 0
lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctpd[df_RT_abs_ctpd$in_range == 1, ])
summary(lmer_RT)
#Include cd-pd (current distribution mean and previous distribution mean difference) and ct_pt current target and previous target ori as predictors
# lmer_RT_cdpt_ctpd<-lmer(rt ~ abs_ctpd_z + abs_cdpd_z + abs_ctpt_z +  group + (abs_ctpd_z|subjectId)+ (abs_ctpt_z|subjectId) + (abs_cdpd_z|subjectId) , REML=F, data = df_RT_abs_ctpd)
# summary(lmer_RT_cdpt_ctpd)
# bf_rt <- generalTestBF(log_rt ~ abs_ctpt_z * abs_ctpd_z * abs_cdpd_z* group + subjectId, data = as.data.frame(df_RT_abs_ctpd),
#                     whichRandom = "subjectId", neverExclude = "subjectId",whichModels = "withmain")
# bf_df_rt <- as.data.frame(bf_rt)
# bf_sorted_rt <- sort(bf_rt/ max(bf_rt))
# bf_sorted_df_rt <- as.data.frame(bf_sorted_rt)
# bf_sorted_df_rt$bfs <- (1/bf_sorted_df_rt$bf)
# print(bf_sorted_df_rt)
#Segmented regression (like in Andrey's papers) for ASD group
df_RT_abs_ctpd_ASD <- df_RT_abs_ctpd %>%filter(group == 'ASD')
lm_RT_ASD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_ASD)
#summary(lm_RT_ASD)
segASD = segmented(obj=lm_RT_ASD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segASD)
davies.test(lm_RT_ASD,seg.Z=~abs_ctpd)
#Segmented regression (like in Andrey's papers) for TD group
df_RT_abs_ctpd_TD <- df_RT_abs_ctpd %>%filter(group == 'TD')
lm_RT_TD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_TD)
segTD = segmented(obj=lm_RT_TD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segTD)
davies.test(lm_RT_TD,seg.Z=~abs_ctpd)
lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctpd)
#LMER models
df_RT_abs_ctpd<- df_filter %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0)
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd< 31] <- 1
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd> 30] <- 0
lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctpd)
summary(lmer_RT)
#Include cd-pd (current distribution mean and previous distribution mean difference) and ct_pt current target and previous target ori as predictors
# lmer_RT_cdpt_ctpd<-lmer(rt ~ abs_ctpd_z + abs_cdpd_z + abs_ctpt_z +  group + (abs_ctpd_z|subjectId)+ (abs_ctpt_z|subjectId) + (abs_cdpd_z|subjectId) , REML=F, data = df_RT_abs_ctpd)
# summary(lmer_RT_cdpt_ctpd)
# bf_rt <- generalTestBF(log_rt ~ abs_ctpt_z * abs_ctpd_z * abs_cdpd_z* group + subjectId, data = as.data.frame(df_RT_abs_ctpd),
#                     whichRandom = "subjectId", neverExclude = "subjectId",whichModels = "withmain")
# bf_df_rt <- as.data.frame(bf_rt)
# bf_sorted_rt <- sort(bf_rt/ max(bf_rt))
# bf_sorted_df_rt <- as.data.frame(bf_sorted_rt)
# bf_sorted_df_rt$bfs <- (1/bf_sorted_df_rt$bf)
# print(bf_sorted_df_rt)
#Segmented regression (like in Andrey's papers) for ASD group
df_RT_abs_ctpd_ASD <- df_RT_abs_ctpd %>%filter(group == 'ASD')
lm_RT_ASD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_ASD)
#summary(lm_RT_ASD)
segASD = segmented(obj=lm_RT_ASD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segASD)
davies.test(lm_RT_ASD,seg.Z=~abs_ctpd)
#Segmented regression (like in Andrey's papers) for TD group
df_RT_abs_ctpd_TD <- df_RT_abs_ctpd %>%filter(group == 'TD')
lm_RT_TD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_TD)
segTD = segmented(obj=lm_RT_TD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segTD)
davies.test(lm_RT_TD,seg.Z=~abs_ctpd)
#LMER models
df_RT_abs_ctpd<- df_filter %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0)
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd< 31] <- 1
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd> 30] <- 0
lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctpd[df_RT_abs_ctpd$in_range == 1, ])
summary(lmer_RT)
#Include cd-pd (current distribution mean and previous distribution mean difference) and ct_pt current target and previous target ori as predictors
# lmer_RT_cdpt_ctpd<-lmer(rt ~ abs_ctpd_z + abs_cdpd_z + abs_ctpt_z +  group + (abs_ctpd_z|subjectId)+ (abs_ctpt_z|subjectId) + (abs_cdpd_z|subjectId) , REML=F, data = df_RT_abs_ctpd)
# summary(lmer_RT_cdpt_ctpd)
# bf_rt <- generalTestBF(log_rt ~ abs_ctpt_z * abs_ctpd_z * abs_cdpd_z* group + subjectId, data = as.data.frame(df_RT_abs_ctpd),
#                     whichRandom = "subjectId", neverExclude = "subjectId",whichModels = "withmain")
# bf_df_rt <- as.data.frame(bf_rt)
# bf_sorted_rt <- sort(bf_rt/ max(bf_rt))
# bf_sorted_df_rt <- as.data.frame(bf_sorted_rt)
# bf_sorted_df_rt$bfs <- (1/bf_sorted_df_rt$bf)
# print(bf_sorted_df_rt)
#Segmented regression (like in Andrey's papers) for ASD group
df_RT_abs_ctpd_ASD <- df_RT_abs_ctpd %>%filter(group == 'ASD')
lm_RT_ASD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_ASD)
#summary(lm_RT_ASD)
segASD = segmented(obj=lm_RT_ASD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segASD)
davies.test(lm_RT_ASD,seg.Z=~abs_ctpd)
#Segmented regression (like in Andrey's papers) for TD group
df_RT_abs_ctpd_TD <- df_RT_abs_ctpd %>%filter(group == 'TD')
lm_RT_TD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_TD)
segTD = segmented(obj=lm_RT_TD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segTD)
davies.test(lm_RT_TD,seg.Z=~abs_ctpd)
#LMER models
df_RT_abs_ctpd<- df_filter %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0)
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd< 31] <- 1
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd> 30] <- 0
df_RT_abs_ctpd$in_range = as.factor(df_RT_abs_ctpd$in_range)
lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctpd[df_RT_abs_ctpd$in_range == 1, ])
summary(lmer_RT)
#Include cd-pd (current distribution mean and previous distribution mean difference) and ct_pt current target and previous target ori as predictors
# lmer_RT_cdpt_ctpd<-lmer(rt ~ abs_ctpd_z + abs_cdpd_z + abs_ctpt_z +  group + (abs_ctpd_z|subjectId)+ (abs_ctpt_z|subjectId) + (abs_cdpd_z|subjectId) , REML=F, data = df_RT_abs_ctpd)
# summary(lmer_RT_cdpt_ctpd)
# bf_rt <- generalTestBF(log_rt ~ abs_ctpt_z * abs_ctpd_z * abs_cdpd_z* group + subjectId, data = as.data.frame(df_RT_abs_ctpd),
#                     whichRandom = "subjectId", neverExclude = "subjectId",whichModels = "withmain")
# bf_df_rt <- as.data.frame(bf_rt)
# bf_sorted_rt <- sort(bf_rt/ max(bf_rt))
# bf_sorted_df_rt <- as.data.frame(bf_sorted_rt)
# bf_sorted_df_rt$bfs <- (1/bf_sorted_df_rt$bf)
# print(bf_sorted_df_rt)
#Segmented regression (like in Andrey's papers) for ASD group
df_RT_abs_ctpd_ASD <- df_RT_abs_ctpd %>%filter(group == 'ASD')
lm_RT_ASD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_ASD)
#summary(lm_RT_ASD)
segASD = segmented(obj=lm_RT_ASD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segASD)
davies.test(lm_RT_ASD,seg.Z=~abs_ctpd)
#Segmented regression (like in Andrey's papers) for TD group
df_RT_abs_ctpd_TD <- df_RT_abs_ctpd %>%filter(group == 'TD')
lm_RT_TD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_TD)
segTD = segmented(obj=lm_RT_TD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segTD)
davies.test(lm_RT_TD,seg.Z=~abs_ctpd)
#LMER models
df_RT_abs_ctpd<- df_filter %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0)
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd< 31] <- 1
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd> 30] <- 0
lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctpd[df_RT_abs_ctpd$in_range == 1, ])
summary(lmer_RT)
#Include cd-pd (current distribution mean and previous distribution mean difference) and ct_pt current target and previous target ori as predictors
# lmer_RT_cdpt_ctpd<-lmer(rt ~ abs_ctpd_z + abs_cdpd_z + abs_ctpt_z +  group + (abs_ctpd_z|subjectId)+ (abs_ctpt_z|subjectId) + (abs_cdpd_z|subjectId) , REML=F, data = df_RT_abs_ctpd)
# summary(lmer_RT_cdpt_ctpd)
# bf_rt <- generalTestBF(log_rt ~ abs_ctpt_z * abs_ctpd_z * abs_cdpd_z* group + subjectId, data = as.data.frame(df_RT_abs_ctpd),
#                     whichRandom = "subjectId", neverExclude = "subjectId",whichModels = "withmain")
# bf_df_rt <- as.data.frame(bf_rt)
# bf_sorted_rt <- sort(bf_rt/ max(bf_rt))
# bf_sorted_df_rt <- as.data.frame(bf_sorted_rt)
# bf_sorted_df_rt$bfs <- (1/bf_sorted_df_rt$bf)
# print(bf_sorted_df_rt)
#Segmented regression (like in Andrey's papers) for ASD group
df_RT_abs_ctpd_ASD <- df_RT_abs_ctpd %>%filter(group == 'ASD')
lm_RT_ASD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_ASD)
#summary(lm_RT_ASD)
segASD = segmented(obj=lm_RT_ASD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segASD)
davies.test(lm_RT_ASD,seg.Z=~abs_ctpd)
#Segmented regression (like in Andrey's papers) for TD group
df_RT_abs_ctpd_TD <- df_RT_abs_ctpd %>%filter(group == 'TD')
lm_RT_TD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_TD)
segTD = segmented(obj=lm_RT_TD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segTD)
davies.test(lm_RT_TD,seg.Z=~abs_ctpd)
#LMER models
df_RT_abs_ctpd<- df_filter %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0)
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd< 31] <- 1
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd> 30] <- 0
lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctpd[df_RT_abs_ctpd$in_range == 1, ])
summary(lmer_RT)
lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctp)
#LMER models
df_RT_abs_ctpd<- df_filter %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0)
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd< 31] <- 1
df_RT_abs_ctpd$in_range[df_RT_abs_ctpd$abs_ctpd> 30] <- 0
lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctpd[df_RT_abs_ctpd$in_range == 1, ])
summary(lmer_RT)
lmer_RT<-lmer(rt ~ abs_ctpd_z*group + (abs_ctpd_z|subjectId) ,  REML=F, data = df_RT_abs_ctpd)
summary(lmer_RT)
#Include cd-pd (current distribution mean and previous distribution mean difference) and ct_pt current target and previous target ori as predictors
# lmer_RT_cdpt_ctpd<-lmer(rt ~ abs_ctpd_z + abs_cdpd_z + abs_ctpt_z +  group + (abs_ctpd_z|subjectId)+ (abs_ctpt_z|subjectId) + (abs_cdpd_z|subjectId) , REML=F, data = df_RT_abs_ctpd)
# summary(lmer_RT_cdpt_ctpd)
# bf_rt <- generalTestBF(log_rt ~ abs_ctpt_z * abs_ctpd_z * abs_cdpd_z* group + subjectId, data = as.data.frame(df_RT_abs_ctpd),
#                     whichRandom = "subjectId", neverExclude = "subjectId",whichModels = "withmain")
# bf_df_rt <- as.data.frame(bf_rt)
# bf_sorted_rt <- sort(bf_rt/ max(bf_rt))
# bf_sorted_df_rt <- as.data.frame(bf_sorted_rt)
# bf_sorted_df_rt$bfs <- (1/bf_sorted_df_rt$bf)
# print(bf_sorted_df_rt)
#Segmented regression (like in Andrey's papers) for ASD group
df_RT_abs_ctpd_ASD <- df_RT_abs_ctpd %>%filter(group == 'ASD')
lm_RT_ASD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_ASD)
#summary(lm_RT_ASD)
segASD = segmented(obj=lm_RT_ASD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segASD)
davies.test(lm_RT_ASD,seg.Z=~abs_ctpd)
#Segmented regression (like in Andrey's papers) for TD group
df_RT_abs_ctpd_TD <- df_RT_abs_ctpd %>%filter(group == 'TD')
lm_RT_TD<-lm(rt ~ abs_ctpd ,  data = df_RT_abs_ctpd_TD)
segTD = segmented(obj=lm_RT_TD,seg.Z=~abs_ctpd, control=seg.control(), model = TRUE)
summary(segTD)
davies.test(lm_RT_TD,seg.Z=~abs_ctpd)
df_steps<-df_filter %>%
mutate(abs_ctpd = abs(ctpd)) %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0) #%>% #Only first trial of test streak
#group_by(subjectId,group,abs_ctpd) %>%
#summarise(rt=mean(rt), log_rt=mean(log_rt), totBlockN=totBlockN)
df_steps$step_ctpd[df_steps$abs_ctpd< 5] <- "0-5"
df_steps$step_ctpd[df_steps$abs_ctpd> 4 & df_steps$abs_ctpd< 15] <- "05-15"
df_steps$step_ctpd[df_steps$abs_ctpd> 14 & df_steps$abs_ctpd< 25] <- "15-25"
df_steps$step_ctpd[df_steps$abs_ctpd> 24 & df_steps$abs_ctpd< 35] <- "25-35"
df_steps$step_ctpd[df_steps$abs_ctpd> 34 & df_steps$abs_ctpd< 50] <- "35-50"
df_steps$step_ctpd[df_steps$abs_ctpd> 49 & df_steps$abs_ctpd< 70] <- "50-70"
df_steps$step_ctpd[df_steps$abs_ctpd> 69 ] <- "70-90"
df_steps$step_ctpd = as.factor(df_steps$step_ctpd)
df_steps_plot <- df_steps%>%
group_by(subjectId,step_ctpd, group)%>%
summarise(rt = mean(rt))%>%
ggplot(aes(x=step_ctpd,y=rt, color = group)) + stat_summary(fun.y=base::mean, geom="point", size =3) + stat_summary(fun.y=base::mean, geom="line")+ stat_summary(fun.y=base::mean, geom="line",size=1.5, aes(group = group))+ stat_summary(fun.data = "mean_se", geom="errorbar", width = 0.2)  + theme_classic() + xlab("Absolute CT-PD") + ylab("Mean Reaction Time (ms)")  + scale_color_manual(values=c("darkorange", "darkslategrey"))
df_steps_plot
plot_grid(ctpd_plot,df_steps_plot,labels = "AUTO")
df_steps<-df_filter %>%
mutate(abs_ctpd = abs(ctpd)) %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0) #%>% #Only first trial of test streak
#group_by(subjectId,group,abs_ctpd) %>%
#summarise(rt=mean(rt), log_rt=mean(log_rt), totBlockN=totBlockN)
df_steps$step_ctpd[df_steps$abs_ctpd< 5] <- "0-5"
df_steps$step_ctpd[df_steps$abs_ctpd> 4 & df_steps$abs_ctpd< 15] <- "05-15"
df_steps$step_ctpd[df_steps$abs_ctpd> 14 & df_steps$abs_ctpd< 25] <- "15-25"
df_steps$step_ctpd[df_steps$abs_ctpd> 24 & df_steps$abs_ctpd< 35] <- "25-35"
df_steps$step_ctpd[df_steps$abs_ctpd> 34 & df_steps$abs_ctpd< 50] <- "35-50"
df_steps$step_ctpd[df_steps$abs_ctpd> 49 & df_steps$abs_ctpd< 70] <- "50-70"
df_steps$step_ctpd[df_steps$abs_ctpd> 69 ] <- "70-90"
df_steps$step_ctpd = as.factor(df_steps$step_ctpd)
df_steps_plot <- df_steps%>%
group_by(subjectId,step_ctpd, group)%>%
summarise(rt = mean(rt))%>%
ggplot(aes(x=step_ctpd,y=rt, color = group)) + stat_summary(fun.y=base::mean, geom="point", size =3) + stat_summary(fun.y=base::mean, geom="line")+ stat_summary(fun.y=base::mean, geom="line",size=1.5, aes(group = group))+ stat_summary(fun.data = "mean_se", geom="errorbar", width = 0.2)  + theme_classic() + xlab("Absolute CT-PD") + ylab("Mean Reaction Time (ms)")  + scale_color_manual(values=c("darkorange", "darkslategrey"))
df_steps_plot
#plot_grid(ctpd_plot,df_steps_plot,labels = "AUTO")
lmer_RT_step<-df_steps%>%
lmer(log_rt ~ step_ctpd * group + (step_ctpd|subjectId),REML=F,control = lmerControl(optimizer ="Nelder_Mead"), data= .)
summary(lmer_RT_step)
df_RT_abs_ctpd<- df_filter %>%
filter(correct==1) %>% #only RTs for correct responses
filter(previous_correct ==1) %>% #Only after a correct trial
filter(dsd==5) %>% #For test streaks with Gaussian distr
filter(trialN == 0)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(reshape2)
library(lme4)
library(readxl)
library("ggpubr")
library(segmented)
library(tidyverse)
library(ggplot2)
library(BayesFactor)
library(lmerTest)
library(cowplot)
library(psycho)
d_files_exp <- dir(path="Data/Exp/", pattern="*.csv", full.names = T)
read_data_exp<- function(x) {
df <- read_csv(x)
df<- mutate_all(df, as.character)
return(df)
}
df <- bind_rows(lapply(d_files_exp, read_data_exp))
#df <- bind_rows(lapply(d_files_exp, read_data_exp))
#Participants in ASD group have a participant number < 100 & participants in the TD group have a participant number > 200
df$group[df$participant < 100] <- "ASD"
df$group[df$participant > 200] <- "TD"
df$group=factor(df$group)
df_select <- df %>%
dplyr::select(.,expName,participant,group,session,blockN, totBlockN, trialN,targetOri,targetPos, targetRow,distrMean,dtype,dsd,targetDist,prevDistrMean,streak_length_prime, seq_type,answer,rt, correct, d_ori_1, d_ori_2,d_ori_3, d_ori_4, d_ori_5, d_ori_6, d_ori_7, d_ori_8, d_ori_9, d_ori_10, d_ori_11, d_ori_12, d_ori_13, d_ori_14, d_ori_15, d_ori_16, d_ori_17, d_ori_18, d_ori_19, d_ori_20, d_ori_21, d_ori_22, d_ori_23, d_ori_24, d_ori_25, d_ori_26, d_ori_27, d_ori_28, d_ori_29, d_ori_30, d_ori_31, d_ori_32, d_ori_33, d_ori_34, d_ori_35) %>%
dplyr::rename(subjectId=participant) %>%
mutate(blockN= as.numeric(blockN), totBlockN = as.numeric(totBlockN), trialN = as.numeric(trialN),dsd = as.numeric(dsd), targetOri = as.numeric(targetOri), targetPos = as.numeric(targetPos), targetRow= as.numeric(targetRow), distrMean=as.numeric(distrMean), targetDist = as.numeric(targetDist),prevDistrMean = as.numeric(prevDistrMean), streak_length_prime=as.numeric(streak_length_prime), rt=as.numeric(rt), correct=as.numeric(correct))%>%
filter(!is.na(rt))
#function to calculate difference between two angles (from Andrey)
angle_dist_180<-function(a,b){
c = a - b
(c+90)%%180 - 90
}
# Variables
df_filter <- df_select %>%
mutate(rt=rt*1000)%>% #Convert to ms instead of sec
mutate(previous_correct = lag(correct)) %>% #Previous trial correct?
mutate(previous_target = lag(targetOri))%>% #Previous target orientation?
mutate(.,log_rt = log(rt)) %>%
mutate(ctpd= angle_dist_180(targetOri,prevDistrMean))%>% #CT-PD: difference between current target ori and previous distractor ori mean.
mutate(abs_ctpd = abs(ctpd))%>% #absolute value of CT-PD
mutate(cdpt= angle_dist_180(distrMean,previous_target))%>% #CD-PT: difference between current distractor ori mean and previous target ori.
mutate(abs_cdpt = abs(cdpt))%>% #absolute value of CD-PT
mutate(ctpt = angle_dist_180(targetOri,previous_target))%>% #CT-PT: difference between current target ori mean and previous target ori.
mutate(abs_ctpt = abs(ctpt)) %>%# absolute value of CT-PT
mutate(cdpd = angle_dist_180(distrMean,prevDistrMean))%>% #CD-PD: difference between current distractor ori mean and previous distractor ori    mean.
mutate(abs_cdpd = abs(cdpd))%>%
mutate(targetDist_ang = angle_dist_180(distrMean,targetOri))%>%
mutate(distrMean = ifelse(distrMean> 90, distrMean - 180, distrMean))%>%#Convert them to orientations between -90° & + 90°
mutate(distrMean = ifelse(distrMean< -90, distrMean + 180,distrMean))%>%
mutate(distrMean = ifelse(distrMean> 90, distrMean - 180, distrMean))%>%
mutate(distrMean = ifelse(distrMean> 90, distrMean - 180, distrMean))%>%
mutate(targetOri = ifelse(targetOri > 90, targetOri - 180, targetOri))%>%
mutate(targetOri = ifelse(targetOri < -90, targetOri + 180, targetOri))%>%
mutate(targetOri = ifelse(targetOri > 90, targetOri - 180, targetOri))%>%
mutate(targetOri = ifelse(targetOri > 90, targetOri - 180, targetOri))
df_filter <- df_filter %>%
group_by(subjectId) %>%
mutate(rt_z = scale(rt),
ctpd_z = scale(ctpd),
ctpd_z2 = scale(ctpd^2), #Quadratic predictors
cdpt_z = scale(cdpt),
ctpt_z = scale(ctpt),
ctpt_z2 = scale(ctpt^2),
cdpd_z=scale(cdpd),
abs_ctpd_z = scale(abs_ctpd),
abs_ctpt_z = scale(abs_ctpt),
abs_cdpd_z=scale(abs_cdpd),
targetDist_ang_z_2 = scale(targetDist_ang^2))
ggplot(df_filter,aes(cdpt)) +geom_histogram(binwidth = 5)
ggplot(df_filter,aes(ctpd)) +geom_histogram(binwidth = 5)
ggplot(df_filter,aes(ctpt)) +geom_histogram(binwidth = 5)
ggplot(df_filter,aes(cdpd)) +geom_histogram(binwidth = 5)
ggplot(df_filter,aes(targetOri)) +geom_histogram(binwidth = 5)
ggplot(df_filter,aes(targetDist_ang)) +geom_histogram(binwidth = 5)
df_filter %>%
filter(correct==1) %>%
filter(dsd == 5)%>%
ggplot(aes(distrMean)) + geom_histogram(binwidth = 5)
#Distribution of rts per participant with outliers
df_filter %>%
filter(correct==1) %>%
ggplot(., aes(subjectId,rt)) + geom_boxplot()
mean = mean(df_filter$rt)
sd = sd(df_filter$rt)
upper_limit = mean+ 3*sd
freq_with_outliers <- df_filter%>%group_by(subjectId,group)%>%summarise(n=n())
df_filter <- filter(df_filter,rt<upper_limit)
df_filter <- filter(df_filter,rt>100)
freq_without_outliers <- df_filter%>%group_by(subjectId,group)%>%summarise(n=n())
#Distribution of rts per participant without outliers
df_filter %>%
filter(correct==1) %>%
ggplot(., aes(subjectId,rt)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Percentage of trials lost per group?
trials_lost <- cbind(freq_with_outliers,freq_without_outliers)
trials_lost <-trials_lost %>% mutate(lost_trials = n-n1)
trials_lost %>% group_by(group) %>% summarise(tot_trials = sum(n), n1= sum(n1),tot_lost_trials = sum(lost_trials), perc = (tot_lost_trials/tot_trials)*100 )
PRIME_TR <- df_filter %>%
filter(correct==1) %>% #Only correct trials
filter(previous_correct == 1) %>% #Previous trial correct to account for post-error slowdown
filter(dsd==10) #Only prime trials
PRIME_TR$trialN = factor(PRIME_TR$trialN)
my.helmert = matrix(c(5,-1,-1,-1,-1,-1,0,4,-1,-1,-1,-1,0,0,3,-1,-1,-1,0,0,0,2,-1,-1,0,0,0,0,1,-1), ncol = 5) #Make my own helmert contrast matrix, because build-in version is actually reverse Helmert contrast
lmer_RT_TD<-lmer(log_rt ~ trialN * group + (trialN|subjectId), data= PRIME_TR, contrasts = list(trialN = my.helmert))
summary(lmer_RT_TD)
